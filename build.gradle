import org.meiskalt7.gradle.version.VersionPlugin

rootProject.group = 'org.meiskalt7.gradle'
rootProject.wrapper.gradleVersion = '4.6'
version = file('version.txt').exists() ? file('version.txt').text.trim() : "0.0.0"

buildscript {
    ext {
        servicePackage = 'org.meiskalt7.gradle'
        servicePackageSlashes = servicePackage.replace('.', '/')

        ver = [
                dependencyManagement: '1.0.8.RELEASE',
                sonarqube           : '2.6.2',
        ]
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:$ver.dependencyManagement",
                "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$ver.sonarqube"
    }
}

ext {
    defaultEncoding = 'UTF-8'
}

allprojects {
    repositories {
        rootProject.buildscript.repositories.each {
            repositories.add(it)
        }
    }

    apply plugin: 'jacoco'
}

apply plugin: 'org.sonarqube'

subprojects {

    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: VersionPlugin

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

}

project(':buildSrc') {

    archivesBaseName = "simple-gradle-versioning-plugin"
    group = parent.group
    version = parent.version

    dependencies {
        compile gradleApi()
        compile localGroovy()
    }

    versionGenerator {
        debug = false
    }

    compileGroovy {
        doLast {
            options.encoding = defaultEncoding
            options.compilerArgs = ['-parameters', '-Xlint:unchecked']
        }
    }

    compileTestGroovy {
        options.encoding = defaultEncoding
        options.compilerArgs = ['-parameters', '-Xlint:unchecked']
    }

    publishing {
        repositories {
            mavenCentral()
        }

        publications {

            mavenGroovy(MavenPublication) {
                groupId project.group
                artifactId rootProject.name
                from components.java
            }
        }
    }

    tasks.withType(Javadoc) {
        options.encoding = defaultEncoding
        options.memberLevel = JavadocMemberLevel.PRIVATE
        options.addBooleanOption("Xdoclint:all").setValue(true)
    }

    task sourceGroovy(type: Jar) {
        from sourceSets.main.groovy.srcDirs = ['src/main/groovy']
    }

    compileGroovy.dependsOn(generateVersion)
}